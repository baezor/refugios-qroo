---
import Layout from "../layouts/Layout.astro";
import shelters from "../../public/shelters.json";

// Filter shelters that have coordinates
const sheltersWithCoordinates = shelters.filter(shelter => 
  shelter.coordinates && shelter.coordinates.lat && shelter.coordinates.lng
);

// Create structured data for the page
const pageTitle = "Mapa de albergues y refugios de Quintana Roo";
const pageDescription = `Mapa interactivo con la ubicación de ${sheltersWithCoordinates.length} albergues y refugios en Quintana Roo, México. Visualiza la distribución geográfica para situaciones de emergencia.`;

// Create JSON-LD structured data for map
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Map",
  "name": pageTitle,
  "description": pageDescription,
  "about": {
    "@type": "Place",
    "name": "Quintana Roo, México",
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": 19.1817,
      "longitude": -88.4791
    }
  },
  "potentialAction": {
    "@type": "ViewAction",
    "target": Astro.url.href
  }
};
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  type="website"
  structuredData={structuredData}
>
  <main>
    <div class="container">
      <h1>Mapa de albergues y refugios de Quintana Roo</h1>
      <p>
        Visualiza la ubicación de los refugios disponibles en el estado de Quintana Roo.
        {sheltersWithCoordinates.length > 0 
          ? `Se muestran ${sheltersWithCoordinates.length} refugios con ubicación disponible.`
          : "No hay refugios con ubicación disponible. Por favor ejecuta el script para obtener las coordenadas primero."}
      </p>

      <div class="map-container">
        <div id="map"></div>
      </div>

      <div class="back-link">
        <a href="/">← Volver al listado completo</a>
      </div>
    </div>
  </main>

  {sheltersWithCoordinates.length > 0 && (
    <script is:inline define:vars={{ sheltersWithCoordinates }}>
      // Define initMap in the global scope
      window.initMap = function() {
        // Check if map element exists before initializing
        const mapElement = document.getElementById("map");
        if (!mapElement) {
          console.log('Map element not found, skipping map initialization');
          return; // Exit if map element doesn't exist (we're not on the map page)
        }
        
        // Ensure Google Maps API is fully loaded
        if (!window.google || !window.google.maps || !window.google.maps.Map) {
          console.error('Google Maps API not fully loaded yet');
          // Try again after a short delay
          setTimeout(window.initMap, 500);
          return;
        }
        
        // Create the map centered in Quintana Roo
        try {
          const map = new google.maps.Map(mapElement, {
            zoom: 8,
            center: { lat: 19.1817, lng: -88.4791 }, // Center of Quintana Roo
            mapId: 'REFUGIOS_QROO_MAP' // Add a Map ID for Advanced Markers
          });

          // Add markers for each shelter with coordinates
          const infoWindow = new google.maps.InfoWindow();
          
          sheltersWithCoordinates.forEach(shelter => {
            if (shelter.coordinates && shelter.coordinates.lat && shelter.coordinates.lng) {
              // Create the marker position
              const position = {
                lat: shelter.coordinates.lat,
                lng: shelter.coordinates.lng
              };
              
              // Check if AdvancedMarkerElement is available, otherwise use standard Marker
              let marker;
              if (google.maps.marker && google.maps.marker.AdvancedMarkerElement) {
                // Create the advanced marker element if available
                marker = new google.maps.marker.AdvancedMarkerElement({
                  map: map,
                  position: position,
                  title: shelter.EDIFICIO
                });
              } else {
                // Fall back to standard marker
                marker = new google.maps.Marker({
                  map: map,
                  position: position,
                  title: shelter.EDIFICIO
                });
              }

              // Add click listener to show info window - use appropriate event type for each marker type
              const eventType = (google.maps.marker && google.maps.marker.AdvancedMarkerElement && 
                               marker instanceof google.maps.marker.AdvancedMarkerElement) ? 
                               'gmp-click' : 'click';
              
              marker.addListener(eventType, () => {
                const content = `
                  <div class="info-window">
                    <h3>${shelter.EDIFICIO}</h3>
                    <p><strong>Municipio:</strong> ${shelter.MUNICIPIO}</p>
                    <p><strong>Localidad:</strong> ${shelter.LOCALIDAD}</p>
                    <p><strong>Domicilio:</strong> ${shelter.DOMICILIO}</p>
                  </div>
                `;
                
                infoWindow.setContent(content);
                
                // Handle opening info window for both marker types
                if (google.maps.marker && google.maps.marker.AdvancedMarkerElement && marker instanceof google.maps.marker.AdvancedMarkerElement) {
                  infoWindow.open({
                    anchor: marker,
                    map: map
                  });
                } else {
                  infoWindow.open(map, marker);
                }
              });
            }
          });
        } catch (error) {
          console.error('Error creating map or markers:', error);
          mapElement.innerHTML = '<div style="padding: 20px; text-align: center;"><p>Error loading map. Please try again later.</p></div>';
        }
      };
    </script>

    <script is:inline define:vars={{ apiKey: import.meta.env.GOOGLE_MAPS_API_KEY }}>
      // Enhanced Google Maps API loader with error handling
      function loadGoogleMapsScript() {
        // First check if we're on the map page by looking for the map element
        const mapElement = document.getElementById('map');
        if (!mapElement) {
          return; // Exit if we're not on the map page
        }
        
        // Check if Google Maps is already loaded
        if (window.google && window.google.maps) {
          try {
            initMap();
          } catch (error) {
            console.error('Error initializing map with existing Google Maps instance:', error);
          }
          return;
        }
        
        // Create a global error handler for the Google Maps API
        window.gm_authFailure = function() {
          console.error('Google Maps authentication error - check your API key');
          const mapElement = document.getElementById('map');
          if (mapElement) {
            mapElement.innerHTML = '<div style="padding: 20px; text-align: center;"><p>Error loading Google Maps. Please try again later.</p></div>';
          }
        };
        
        // Add error handling for the script loading
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&libraries=marker&loading=async`;
        script.async = true;
        script.defer = true;
        
        // Add error handling for the script
        script.onerror = function() {
          console.error('Failed to load Google Maps API script');
          const mapElement = document.getElementById('map');
          if (mapElement) {
            mapElement.innerHTML = '<div style="padding: 20px; text-align: center;"><p>Error loading Google Maps. Please try again later.</p></div>';
          }
        };
        
        document.head.appendChild(script);
      }
      
      // Create a more robust initialization function
      const originalInitMap = window.initMap;
      window.initMap = function() {
        try {
          // Check if Google Maps API is fully loaded
          if (!window.google || !window.google.maps || typeof window.google.maps.Map !== 'function') {
            console.log('Google Maps API not fully loaded, waiting...');
            // Try again after a short delay
            setTimeout(window.initMap, 500);
            return;
          }
          
          if (typeof originalInitMap === 'function') {
            originalInitMap();
          }
        } catch (error) {
          console.error('Error in map initialization:', error);
          const mapElement = document.getElementById('map');
          if (mapElement) {
            mapElement.innerHTML = '<div style="padding: 20px; text-align: center;"><p>Error initializing map. Please try again later.</p></div>';
          }
        }
      };
      
      // Load the Google Maps API after the page is fully loaded
      window.addEventListener('load', function() {
        // Add a small delay to ensure everything is ready
        setTimeout(loadGoogleMapsScript, 200);
      });
      
      // Also handle Astro page transitions
      document.addEventListener('astro:page-load', function() {
        // Add a longer delay to ensure DOM is fully updated after transition
        setTimeout(loadGoogleMapsScript, 300);
      });
      
      // Handle navigation away from the page
      document.addEventListener('astro:before-swap', function() {
        // Clean up Google Maps instance to prevent memory leaks
        if (window.google && window.google.maps) {
          // Nothing specific to clean up with the basic implementation
          console.log('Cleaning up before page navigation');
        }
      });
    </script>
  )}
</Layout>

<style>
  main {
    width: 100%;
    min-height: 100dvh;
    padding: 28px 28px 48px 28px;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  h1 {
    font-size: 2.5rem;
    line-height: 1;
    margin-bottom: 1rem;
    text-align: center;
    color: #AB0A3D;
  }

  p {
    font-size: 1.25rem;
    line-height: 1.5;
    text-align: center;
    margin-bottom: 2rem;
  }

  .map-container {
    width: 100%;
    height: 70vh;
    margin: 2rem 0;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(171, 10, 61, 0.2);
    border: 2px solid #AB0A3D;
  }

  #map {
    width: 100%;
    height: 100%;
  }

  .back-link {
    text-align: center;
    margin-top: 2rem;
  }

  .back-link a {
    color: #AB0A3D;
    text-decoration: none;
    font-size: 1.2rem;
    display: inline-flex;
    align-items: center;
    transition: transform 0.2s;
    font-weight: bold;
  }

  .back-link a:hover {
    transform: translateX(-4px);
  }

  :global(.info-window) {
    padding: 5px;
    max-width: 300px;
  }

  :global(.info-window h3) {
    margin-top: 0;
    margin-bottom: 8px;
    color: #AB0A3D;
  }

  :global(.info-window p) {
    margin: 5px 0;
    font-size: 14px;
    text-align: left;
  }
</style>