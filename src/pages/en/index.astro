---
import Layout from "../../layouts/Layout.astro";
import shelters from "../../../public/shelters.json";
import { slugify } from "../../utils/slugify";
import "../../styles/shelters.css";
import { getLangFromUrl, useTranslations, useTranslatedPath } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const totalShelters = shelters.length;
const municipalities = [...new Set(shelters.map(shelter => shelter.MUNICIPIO))].sort();
const sortedShelters = [...shelters].sort((a, b) => a.EDIFICIO.localeCompare(b.EDIFICIO));

// Create structured data for the page
const pageTitle = t('home.title');
const pageDescription = t('home.description').replace('{count}', totalShelters.toString());

// Create JSON-LD structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "name": pageTitle,
  "description": pageDescription,
  "numberOfItems": totalShelters,
  "itemListElement": sortedShelters.slice(0, 10).map((shelter, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "item": {
      "@type": "CivicStructure",
      "name": shelter.EDIFICIO,
      "address": {
        "@type": "PostalAddress",
        "addressLocality": shelter.LOCALIDAD,
        "addressRegion": "Quintana Roo",
        "addressCountry": "MX",
        "streetAddress": shelter.DOMICILIO
      }
    }
  }))
};
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  type="website"
  structuredData={structuredData}
>
  <main>
    <div class="container">
      <h1>{t('home.title')}</h1>
      <p>
        {t('home.intro')}
        <strong>{totalShelters} {t('home.shelters')}</strong> in Quintana Roo
      </p>

      <div class="actions-section">
        <button id="find-nearest-shelter" class="action-button">
          {t('home.findNearest')}
        </button>
        <p class="geolocation-notice">{t('home.geolocationNotice')}</p>
      </div>

      <!-- Nearest shelter result container -->
      <div id="nearest-shelter-container" class="nearest-shelter-container hidden">
        <div class="nearest-shelter-header">
          <h2>{t('home.nearestShelters')}</h2>
          <button id="close-nearest-shelter" class="close-button" aria-label={t('common.close')}>&times;</button>
        </div>
        <div id="nearest-shelter-content" class="nearest-shelter-content">
          <!-- Content will be populated by JavaScript -->
        </div>
        <div id="nearest-shelter-error" class="nearest-shelter-error hidden">
          <!-- Error messages will be displayed here -->
        </div>
      </div>

      <div class="filter-section">
        <p class="municipality-links-title"><strong>{t('home.sheltersByMunicipality')}</strong></p>
        <div class="municipality-links">
          {municipalities.map((municipality) => (
            <a 
              href={translatePath(`/${slugify(municipality)}`)}
              class="municipality-link"
            >
              {municipality}
            </a>
          ))}
        </div>
      </div>
     
    </div>
  </main>
</Layout>

<script is:inline define:vars={{ 
  shelters: sortedShelters, 
  translations: {
    loading: t('nearest.loading'),
    error: {
      noData: t('error.noShelterData'),
      noNearShelters: t('error.noNearShelters'),
      locationDenied: t('geolocation.denied'),
      locationUnavailable: t('geolocation.unavailable'),
      locationTimeout: t('geolocation.timeout'),
      locationUnknown: t('geolocation.unknown'),
      noGeolocation: t('geolocation.notAvailable')
    },
    labels: {
      distance: t('nearest.distance'),
      municipality: t('shelter.municipality'),
      locality: t('shelter.locality'),
      address: t('shelter.address'),
      directions: t('shelter.directions'),
      closest: t('nearest.closest'),
      option: t('nearest.option')
    }
  }
}}>
  // Make shelters data available globally
  window.sheltersData = shelters;
  window.shelterTranslations = translations;
  
  document.addEventListener('DOMContentLoaded', initializeGeolocation);
  document.addEventListener('astro:page-load', initializeGeolocation);
  
  function initializeGeolocation() {
    const findNearestButton = document.getElementById('find-nearest-shelter');
    const nearestShelterContainer = document.getElementById('nearest-shelter-container');
    const nearestShelterContent = document.getElementById('nearest-shelter-content');
    const nearestShelterError = document.getElementById('nearest-shelter-error');
    const closeButton = document.getElementById('close-nearest-shelter');
    
    if (!findNearestButton) return;
    
    // Add click event to find nearest shelter button
    findNearestButton.addEventListener('click', () => {
      // Show loading state
      nearestShelterContainer.classList.remove('hidden');
      nearestShelterError.classList.add('hidden');
      nearestShelterContent.innerHTML = `<div class="loading">${window.shelterTranslations.loading}</div>`;
      
      // Check if geolocation is available
      if (!navigator.geolocation) {
        showError(window.shelterTranslations.error.noGeolocation);
        return;
      }
      
      // Request user's location
      navigator.geolocation.getCurrentPosition(
        // Success callback
        position => {
          const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          
          findNearestShelters(userLocation);
        },
        // Error callback
        error => {
          let errorMessage = '';
          
          switch(error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = window.shelterTranslations.error.locationDenied;
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = window.shelterTranslations.error.locationUnavailable;
              break;
            case error.TIMEOUT:
              errorMessage = window.shelterTranslations.error.locationTimeout;
              break;
            default:
              errorMessage = window.shelterTranslations.error.locationUnknown;
          }
          
          showError(errorMessage);
        },
        // Options
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 0
        }
      );
    });
    
    // Add click event to close button
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        nearestShelterContainer.classList.add('hidden');
      });
    }
    
    // Function to show error messages
    function showError(message) {
      nearestShelterError.textContent = message;
      nearestShelterError.classList.remove('hidden');
      nearestShelterContent.innerHTML = '';
    }
    
    // Function to find the nearest shelters
    function findNearestShelters(userLocation) {
      // Check if we have shelter data
      if (!window.sheltersData || window.sheltersData.length === 0) {
        showError(window.shelterTranslations.error.noData);
        return;
      }
      
      // Array to store shelters with their distances
      const sheltersWithDistances = [];
      
      // Calculate distance to each shelter
      window.sheltersData.forEach(shelter => {
        // Try to get coordinates from shelter data
        let shelterCoords;
        
        if (shelter.coordinates && shelter.coordinates.lat && shelter.coordinates.lng) {
          shelterCoords = {
            lat: parseFloat(shelter.coordinates.lat),
            lng: parseFloat(shelter.coordinates.lng)
          };
          
          // Calculate distance between user and shelter
          const distance = calculateDistance(
            userLocation.lat, userLocation.lng,
            shelterCoords.lat, shelterCoords.lng
          );
          
          // Add to array with distance
          sheltersWithDistances.push({
            ...shelter,
            distance: distance
          });
        }
      });
      
      // Sort shelters by distance (closest first)
      sheltersWithDistances.sort((a, b) => a.distance - b.distance);
      
      // Get the three nearest shelters (or fewer if less are available)
      const nearestShelters = sheltersWithDistances.slice(0, 3);
      
      // Display the nearest shelters
      if (nearestShelters.length > 0) {
        // Create HTML for each shelter
        const sheltersHTML = nearestShelters.map((shelter, index) => {
          // Format distance for display
          const formattedDistance = formatDistance(shelter.distance);
          const orderLabel = index === 0 ? window.shelterTranslations.labels.closest : `${window.shelterTranslations.labels.option} ${index + 1}`;
          
          return `
            <div class="shelter-card ${index === 0 ? 'primary-shelter' : ''}">
              <div class="shelter-order">${orderLabel}</div>
              <h3>${shelter.EDIFICIO}</h3>
              <p class="distance"><strong>${window.shelterTranslations.labels.distance}</strong> ${formattedDistance}</p>
              <p><strong>${window.shelterTranslations.labels.municipality}</strong> ${shelter.MUNICIPIO}</p>
              <p><strong>${window.shelterTranslations.labels.locality}</strong> ${shelter.LOCALIDAD}</p>
              <p><strong>${window.shelterTranslations.labels.address}</strong> ${shelter.DOMICILIO}</p>
              <a href="https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(
                `${shelter.EDIFICIO}, ${shelter.MUNICIPIO}, Quintana Roo, Mexico`
              )}" class="directions-button" target="_blank" rel="noopener noreferrer">
                ${window.shelterTranslations.labels.directions}
              </a>
            </div>
          `;
        }).join('');
        
        nearestShelterContent.innerHTML = `
          <div class="shelters-grid">
            ${sheltersHTML}
          </div>
        `;
      } else {
        showError(window.shelterTranslations.error.noNearShelters);
      }
    }
    
    // Function to calculate distance between two points using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radius of the Earth in kilometers
      const dLat = deg2rad(lat2 - lat1);
      const dLon = deg2rad(lon2 - lon1);
      
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLon/2) * Math.sin(dLon/2);
      
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = R * c; // Distance in kilometers
      
      return distance;
    }
    
    // Function to convert degrees to radians
    function deg2rad(deg) {
      return deg * (Math.PI/180);
    }
    
    // Function to format distance for display
    function formatDistance(distance) {
      if (distance < 1) {
        // Convert to meters if less than 1 km
        return `${Math.round(distance * 1000)} meters`;
      } else {
        // Display in kilometers with one decimal place
        return `${distance.toFixed(1)} km`;
      }
    }
  }
</script>

<style>
  main {
    width: 100%;
    min-height: 100dvh;
    padding: 28px 28px 48px 28px;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  h1 {
    font-size: 2.5rem;
    line-height: 1;
    margin-bottom: 1rem;
    text-align: center;
  }

  p {
    font-size: 1.25rem;
    line-height: 1.5;
    text-align: center;
  }

  .municipality-links-title {
    font-size: 1.25rem;
    line-height: 1.5;
    margin-bottom: 0;
    text-align: center;
  }

  a {
    color: rgb(var(--accent));
    text-decoration: underline;
    &:hover {
      text-decoration: underline;
    }
  }

  .filter-section {
    margin: 2rem 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .municipality-links {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }

  .municipality-link {
    padding: 0.25rem 0.5rem;
    background-color: rgba(var(--accent), 0.1);
    border-radius: 0.25rem;
    transition: background-color 0.2s ease;
    &:hover {
      background-color: rgba(var(--accent), 0.2);
    }
  }

  .actions-section {
    text-align: center;
    margin: 2rem 0;
  }

  .action-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: rgb(var(--accent));
    color: white;
    border-radius: 0.5rem;
    font-weight: bold;
    text-decoration: none;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.2s ease, transform 0.2s ease;
    &:hover {
      background-color: rgb(var(--accent-dark, var(--accent)));
      transform: translateY(-2px);
      text-decoration: none;
    }
  }

  .geolocation-notice {
    font-size: 0.85rem;
    margin: 1rem 0;
  }

  @media (max-width: 768px) {
    .actions-section {
      flex-direction: column;
      align-items: center;
    }
  }
</style>